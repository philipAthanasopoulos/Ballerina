<div data-turbo="false">
  <h2><%= @title %></h2>
  <div>
    <label><input type="checkbox" id="<%= @id_name %>-wins" checked> Wins</label>
    <label><input type="checkbox" id="<%= @id_name %>-losses" checked> Losses</label>
    <label><input type="checkbox" id="<%= @id_name %>-ties" checked> Ties</label>
  </div>
  <div id="<%= @id_name %>"></div>
  <script>
      document.addEventListener("DOMContentLoaded", function () {
          const margin = {top: 10, right: 30, bottom: 30, left: 60},
              width = 1000 - margin.left - margin.right,
              height = 400 - margin.top - margin.bottom;

          const svg = d3.select("#<%= @id_name %>")
              .append("svg")
              .attr("width", width + margin.left + margin.right)
              .attr("height", height + margin.top + margin.bottom)
              .append("g")
              .attr("transform", `translate(${margin.left},${margin.top})`);

          const data = <%= {
                            first_year: @first_year,
                            last_year: @last_year,
                            years: @date_range,
                            wins: @wins,
                            losses: @losses,
                            ties: @ties
                          }.to_json.html_safe %>;

          const formattedData = data.years.map((year, index) => ({
              year: year,
              wins: data.wins[year] || 0,
              losses: data.losses[year] || 0,
              ties: data.ties[year] || 0
          }));

          const x = d3.scaleLinear()
              .domain([data.first_year, data.last_year])
              .range([0, width]);
          svg.append("g")
              .attr("transform", `translate(0, ${height})`)
              .call(d3.axisBottom(x).ticks(5));

          const y = d3.scaleLinear()
              .domain([0, d3.max(formattedData, d => Math.max(d.wins, d.losses, d.ties))])
              .range([height, 0]);
          svg.append("g")
              .call(d3.axisLeft(y));

          svg.append("g")
              .attr("class", "grid")
              .call(d3.axisLeft(y).tickSize(-width).tickFormat(""));
          svg.append("g")
              .attr("class", "grid")
              .attr("transform", `translate(0, ${height})`)
              .call(d3.axisBottom(x).tickSize(-height).tickFormat(""));

          const color = d3.scaleOrdinal()
              .domain(["wins", "losses", "ties"])
              .range(["#4daf4a", "#e41a1c", "#377eb8"]);

          const lines = {};
          ["wins", "losses", "ties"].forEach(key => {
              lines[key] = svg.append("path")
                  .datum(formattedData)
                  .attr("fill", "none")
                  .attr("stroke", color(key))
                  .attr("stroke-width", 2)
                  .attr("d", d3.line()
                      .x(d => x(d.year))
                      .y(d => y(d[key]))
                  );
          });

          ["wins", "losses", "ties"].forEach(key => {
              document.getElementById(`<%= @id_name %>-` + key).addEventListener("change", function () {
                  lines[key].style("display", this.checked ? null : "none");
              });
          });
      });
  </script>
</div>